// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String          @id @unique @default(uuid())
  firstName                String
  lastName                 String
  email                    String          @unique
  password                 String
  addresses                Address[]
  lastLogin                DateTime?
  isVerified               Boolean         @default(false)
  resetPasswordToken       String?
  resetPasswordExpires     DateTime?
  verificationToken        String?
  verificationTokenExpires DateTime?
  productReviews           ProductReview[]
  orders                   Order[]
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
}

model Address {
  id           String      @id @unique @default(uuid())
  title        String
  address1     String
  address2     String?
  city         String
  state        String
  neighborhood String
  country      String
  zip          String
  phone        String
  type         AddressType @default(SHIPPING)
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Image {
  id               String          @id @unique @default(uuid())
  url              String          @unique
  alt              String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Product          Product[]
  ProductGallery   ProductGallery? @relation(fields: [productGalleryId], references: [id])
  productGalleryId String?
}

model Product {
  id              String            @id @unique @default(uuid())
  name            String
  slug            String            @unique
  description     String?
  regularPrice    Decimal
  salePrice       Decimal?
  stockQuantity   Int?
  sku             String?
  status          ProductStatus     @default(DRAFT)
  type            ProductType       @default(SIMPLE)
  categories      ProductCategory[]
  tags            ProductTag[]
  featuredImage   Image             @relation(fields: [featuredImageId], references: [id])
  featuredImageId String
  gallery         ProductGallery[]
  attributes      Attribute[]
  variations      Variation[]
  reviews         ProductReview[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  OrderItem       OrderItem[]
}

model ProductGallery {
  id        String   @id @unique @default(uuid())
  images    Image[]
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model ProductCategory {
  id        String    @id @unique @default(uuid())
  name      String
  slug      String    @unique
  parentId  String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductTag {
  id        String    @id @unique @default(uuid())
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Attribute {
  id                 String               @id @unique @default(uuid())
  name               String
  values             AttributeValue[]
  products           Product[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Variation          Variation?           @relation(fields: [variationId], references: [id])
  variationId        String?
  VariationAttribute VariationAttribute[]
}

model AttributeValue {
  id                 String               @id @unique @default(uuid())
  name               String
  value              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Attribute          Attribute?           @relation(fields: [attributeId], references: [id])
  attributeId        String?
  VariationAttribute VariationAttribute[]
}

model Variation {
  id                 String               @id @unique @default(uuid())
  product            Product?             @relation(fields: [productId], references: [id])
  attributes         Attribute[]
  regularPrice       Decimal
  salePrice          Decimal?
  stockQuantity      Int?
  sku                String?
  productId          String?
  VariationAttribute VariationAttribute[]
}

model VariationAttribute {
  id               String          @id @unique @default(uuid())
  variation        Variation?      @relation(fields: [variationId], references: [id])
  attribute        Attribute?      @relation(fields: [attributeId], references: [id])
  value            AttributeValue? @relation(fields: [attributeValueId], references: [id])
  variationId      String?
  attributeId      String?
  attributeValueId String?
}

model ProductReview {
  id         String   @id @unique @default(uuid())
  rating     Int
  comment    String?
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  productId  String
}

model Order {
  id           String      @id @unique @default(uuid())
  orderNumber  String      @unique
  status       OrderStatus @default(PENDING)
  total        Decimal
  subTotal     Decimal
  tax          Decimal
  discount     Decimal?
  shippingDate DateTime?
  paymentDate  DateTime?
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
  shipping     Shipping    @relation(fields: [shippingId], references: [id])
  coupon       Coupon?     @relation(fields: [couponId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  shippingId   String
  couponId     String?
}

model OrderItem {
  id        String  @id @unique @default(uuid())
  quantity  Int
  price     Decimal
  total     Decimal
  product   Product @relation(fields: [productId], references: [id])
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
  productId String
}

model Coupon {
  id          String     @id @unique @default(uuid())
  code        String     @unique
  description String?
  type        CouponType @default(FIXED)
  amount      Decimal
  usageLimit  Int?
  usedCount   Int
  activeFrom  DateTime
  activeTo    DateTime
  orders      Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Shipping {
  id                   String         @id @unique @default(uuid())
  name                 String
  price                Decimal
  method               ShippingMethod @default(FLAT_RATE)
  fixedRate            Decimal?
  freeShippingTreshold Decimal?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  Order                Order[]
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}

enum ProductType {
  SIMPLE
  VARIABLE
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum CouponType {
  FIXED
  PERCENTAGE
}

enum ShippingMethod {
  FLAT_RATE
  FREE_SHIPPING
}
